{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\n\nconst refs = {\n    input: document.querySelector(\"#datetime-picker\"),\n    start: document.querySelector('button[data-start]'),\n    days: document.querySelector('span[data-days]'),\n    hours: document.querySelector('span[data-hours]'),\n    minutes: document.querySelector('span[data-minutes]'),\n    seconds: document.querySelector('span[data-seconds]')\n}\n\nrefs.start.addEventListener('click', onStartCountDown)\n\nrefs.start.setAttribute(\"disabled\", \"true\")\n\nconst currentDate = new Date().getTime();\nlet deltaTime = null;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const currentDate = options.defaultDate.getTime();\n        const choosenDate = selectedDates[0].getTime();\n\n        if (choosenDate < currentDate) {\n            return iziToast.warning({\n                title: 'Caution',\n                message: \"Please choose a date in the future\",\n                position: 'topCenter',\n                timeout: 3000,\n            });\n        }\n        refs.start.removeAttribute(\"disabled\")\n        deltaTime = choosenDate - currentDate;\n        convertMs(deltaTime)\n        console.log(\"deltaTime >>>\", deltaTime)\n    },\n};\nflatpickr(refs.input, options)\n\nfunction onStartCountDown() {\n    const DELAY = 1000;\n    const id = setInterval((() => {\n        countDown(deltaTime)\n        console.log(\"start countdown\")\n    }), DELAY)\n}\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}"],"names":["refs","onStartCountDown","deltaTime","options","selectedDates","currentDate","choosenDate","iziToast","flatpickr"],"mappings":"+IAKA,MAAMA,EAAO,CACT,MAAO,SAAS,cAAc,kBAAkB,EAChD,MAAO,SAAS,cAAc,oBAAoB,EAClD,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACxD,EAEAA,EAAK,MAAM,iBAAiB,QAASC,CAAgB,EAErDD,EAAK,MAAM,aAAa,WAAY,MAAM,EAEtB,IAAI,KAAI,EAAG,QAAU,EACzC,IAAIE,EAAY,KAEhB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAcF,EAAQ,YAAY,QAAO,EACzCG,EAAcF,EAAc,GAAG,QAAO,EAE5C,GAAIE,EAAcD,EACd,OAAOE,EAAS,QAAQ,CACpB,MAAO,UACP,QAAS,qCACT,SAAU,YACV,QAAS,GACzB,CAAa,EAELP,EAAK,MAAM,gBAAgB,UAAU,EACrCE,EAAYI,EAAcD,EAE1B,QAAQ,IAAI,gBAAiBH,CAAS,CACzC,CACL,EACAM,EAAUR,EAAK,MAAOG,CAAO,EAE7B,SAASF,GAAmB,CAEb,YAAa,IAAM,CAC1B,UAAUC,CAAS,EACnB,QAAQ,IAAI,iBAAiB,CAChC,EAAG,GAAK,CACb"}